<!DOCTYPE html>
<html>
    <head>
        <title>Page Title</title>
        <style type="text/css">
        body{
            margin: 0;
            background-color: black;
        }
    </style>
    </head>
    <body>
       user-select: none;"><span>Score:</span><span id="scoreEl" >0</span></div>

<div  id = "modalEl" style="position: fixed; top: 0;
left: 0; right: 0; bottom: 0; display: flex; align-items: center; justify-content: center;">
    <div style="background-color: white ;width: 700px; padding: 6px; text-align: center;">
        <h1 id="totalScore" style="font-size:50px; font-weight: bold; user-select: none; leading:none">0</h1>
        <p style="font-size: 20px; color: gray; user-select: none;">Points</p>
        <div >
            <button  id ="startbtn"style="background-color:#1b9cb9; color: white; border-radius: 30px; width: 500px; font-size: 25px; border:none;  user-select: none;         ">Start Game</button>
        </div>
    </div>
</div>
    <canvas></canvas>

    <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/
    gsap/3.5.1/gsap.min.js"></script>
    <script type="text/javascript">
        //created by Cris Kevin
alert("A simple shooting game\nPlay and enjoy\nBeat your high score.......:)")
const canvas = document.querySelector('canvas');
const c = canvas.getContext('2d')
const scoreEl = document.querySelector('#scoreEl');
const startbtn = document.querySelector('#startbtn');
const modalEl = document.querySelector('#modalEl');
const totalScore = document.querySelector('#totalScore');

canvas.width=innerWidth
canvas.height=innerHeight

class Player{
    constructor(x, y, radius, color){
        this.x = x
        this.y = y
        this.radius = radius
        this.color = color
    }

    draw(){
        c.beginPath()
        c.arc(this.x,
              this.y, 
              this.radius, 
              0,
              Math.PI * 2, 
              false)
        c.fillStyle = this.color
        c.fill()
    }
}

class Projectile{
    constructor(x, y, radius, color, velocity){
        this.x = x
        this.y = y
        this.radius = radius
        this.color = color
        this.velocity = velocity
    }

        draw(){
        c.beginPath()
        c.arc(this.x,
              this.y, 
              this.radius, 
              0,
              Math.PI * 2, 
              false)
        c.fillStyle = this.color
        c.fill()
    }

        update(){
          this.draw()
          this.x = this.x + this.velocity.x
          this.y = this.y + this.velocity.y
    }
}

class Enemy{
    constructor(x, y, radius, color, velocity){
        this.x = x
        this.y = y
        this.radius = radius
        this.color = color
        this.velocity = velocity
    }

        draw(){
        c.beginPath()
        c.arc(this.x,
              this.y, 
              this.radius, 
              0,
              Math.PI * 2, 
              false)
        c.fillStyle = this.color
        c.fill()
    }

        update(){
          this.draw()
          this.x = this.x + this.velocity.x
          this.y = this.y + this.velocity.y
    }
}


class Particle{
    constructor(x, y, radius, color, velocity){
        this.x = x
        this.y = y
        this.radius = radius
        this.color = color
        this.velocity = velocity
        this.alpha = 1
    }

        draw(){
        c.save()
        c.globalAlpha = this.alpha
        c.beginPath()
        c.arc(this.x,
              this.y, 
              this.radius, 
              0,
              Math.PI * 2, 
              false)
        c.fillStyle = this.color
        c.fill()
        c.restore()
    }

        update(){
          this.draw()
          this.x = this.x + this.velocity.x
          this.y = this.y + this.velocity.y
          this.alpha -= 0.01
    }
}


const x = canvas.width / 2
const y = canvas.height / 2

let player = new Player(x, y, 10, 'white')
let projectiles = []
let enemies = []
let particles = []

function init() {
 player = new Player(x, y, 10, 'white')
 projectiles = []
 enemies = []
 particles = []
 score = 0
 scoreEl.innerHTML = score
 totalScore.innerHTML = score
}

function spawnEnemies() {
    setInterval(() => {
     const radius = Math.random() * (30 - 6) + 6
     let x
     let y
     if (Math.random() < 0.5) {
      x = Math.random() < 0.5 ? 0 - radius : canvas.width + radius
      y = Math.random() * canvas.height
    }else {
        x = Math.random() * canvas.width
        y = Math.random() < 0.5 ? 0 - radius : canvas.height + radius
    } 
     const color = `hsl(${Math.random() * 360},90%,45%)`
     const angle = Math.atan2(
        canvas.height / 2 - y,
     canvas.width / 2 - x)

   const velocity = {
       x: Math.cos(angle),
       y: Math.sin(angle)
   }
     enemies.push(new Enemy(x,y,radius,color,velocity))
    }, 1000)
}

let animationId
let score = 0
function animate() {
  animationId = requestAnimationFrame(animate)
  c.fillStyle = 'rgba(0,0,0,0.1)'
  c.fillRect(0, 0, canvas.width, canvas.height)
  player.draw()
  particles.forEach((particle, index) => {
      if (particle.alpha <= 0) {
          particles.splice(index, 1)
      }else{
      particle.update()    
      }
      
  });
  projectiles.forEach((projectile,index) => {
    projectile.update()
       //remove projectile offscreen
    if (projectile.x + projectile.radius < 0 || 
        projectile.x - projectile.radius > canvas.width ||
        projectile.y + projectile.radius < 0 ||
        projectile.y - projectile.radius > canvas.height) {
        setTimeout(() => {
      projectiles.splice(index, 1)
      },0)
    }
  }); 

  enemies.forEach((enemy,index ) => {
    enemy.update()

    const dist =  Math.hypot(player.x - enemy.x,player.y - enemy.y)
    //end game
    if (dist - enemy.radius - player.radius < 1 ){
       cancelAnimationFrame(animationId)
       modalEl.style.display = 'flex'
       totalScore.innerHTML = score
    }
   

    projectiles.forEach((projectile, projectileIndex) => {
    const dist =  Math.hypot(projectile.x - enemy.x,projectile.y - enemy.y)

    //collision detection/projectiles-enemy
    if (dist - enemy.radius - projectile.radius < 1 ) {


      //create explosion
      for (let i = 0; i < enemy.radius * 2; i++) {
            particles.push(new Particle(
                projectile.x,
                projectile.y,
                Math.random() * 2,
                enemy.color,
                {
                    x:(Math.random() - 0.5)  * (Math.random() * 8),
                    y:(Math.random() - 0.5)  * (Math.random() * 8)
                }
                ))
      }

      if (enemy.radius - 10 > 5) {


          //score incrementation
       score += 250
       scoreEl.innerHTML = score


          gsap.to(enemy,{
              radius:enemy.radius - 10
          })
                 setTimeout(() => {
      projectiles.splice(projectileIndex, 1)
      },0)

      }else {
          //remove from screen altogether
          //score incrementation
       score += 100
       scoreEl.innerHTML = score
                setTimeout(() => {
       enemies.splice(index, 1)
      projectiles.splice(projectileIndex, 1)
      },0)
      }    
    }

    })

  })

}

addEventListener('click',(event) => {
    
   const angle = Math.atan2(
       event.clientY - canvas.height / 2,
    event.clientX - canvas.width / 2)

   const velocity = {
       x: Math.cos(angle) * 5,
       y: Math.sin(angle) * 5
   }
   projectiles.push(new Projectile(
       canvas.width / 2,
       canvas.height / 2,
       5,
       `white`,
    velocity
       )
   )    
});

startbtn.addEventListener('click', () => {
init()
animate()
spawnEnemies()
 modalEl.style.display = 'none'
})
    </script> 
    </body>
</html>
